/*
	File was generated by CROC jXFW
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
define(["i18n!./nls/resources"], function (resources) {
	"use strict";

	return {
		enums: {
			DocumentPermission: {
				vt: "i4",
				flags: false,
				descr: resources["model.DocumentPermission"],
				members: {
					COMMON: {value: 0, descr: resources["model.DocumentPermission.COMMON"]},
					DSP: {value: 1, descr: resources["model.DocumentPermission.DSP"]},
					KT: {value: 2, descr: resources["model.DocumentPermission.KT"]}
				}
			},
			ContractState: {
				vt: "i4",
				flags: false,
				descr: resources["model.ContractState"],
				members: {
					CS_PERFORMING: {value: 0, descr: resources["model.ContractState.CS_PERFORMING"]},
					CS_PERFORMED: {value: 1, descr: resources["model.ContractState.CS_PERFORMED"]},
					CS_NOT_PERFORMING: {value: 2, descr: resources["model.ContractState.CS_NOT_PERFORMING"]},
					CS_NOT_INTO_FORCE: {value: 3, descr: resources["model.ContractState.CS_NOT_INTO_FORCE"]},
					CS_DISSOLVED: {value: 4, descr: resources["model.ContractState.CS_DISSOLVED"]}
				}
			},
			ContractConditionIntoForce: {
				vt: "i4",
				flags: false,
				descr: resources["model.ContractConditionIntoForce"],
				members: {
					CCIF_IN_SIGNING_TIME: {value: 0, descr: resources["model.ContractConditionIntoForce.CCIF_IN_SIGNING_TIME"]},
					CCIF_WITH_CONDITION: {value: 1, descr: resources["model.ContractConditionIntoForce.CCIF_WITH_CONDITION"]}
				}
			},
			BookmarkType: {
				vt: "i4",
				flags: false,
				descr: resources["model.BookmarkType"],
				members: {
					ENTITY: {value: 0, descr: resources["model.BookmarkType.ENTITY"]},
					PART: {value: 1, descr: resources["model.BookmarkType.PART"]},
					COMMAND: {value: 2, descr: resources["model.BookmarkType.COMMAND"]}
				}
			},
			ContractSettlementType: {
				vt: "i4",
				flags: false,
				descr: resources["model.ContractSettlementType"],
				members: {
					CST_PROFITABLE: {value: 0, descr: resources["model.ContractSettlementType.CST_PROFITABLE"]},
					CST_CONSUMABLES: {value: 1, descr: resources["model.ContractSettlementType.CST_CONSUMABLES"]}
				}
			},
			ApprovalIterationState: {
				vt: "i4",
				flags: false,
				descr: resources["model.ApprovalIterationState"],
				members: {
					PLANNED: {value: 0, descr: resources["model.ApprovalIterationState.PLANNED"]},
					ACTIVE: {value: 1, descr: resources["model.ApprovalIterationState.ACTIVE"]},
					PROCESSED: {value: 2, descr: resources["model.ApprovalIterationState.PROCESSED"]}
				}
			},
			ApprovalPlanningStage: {
				vt: "i4",
				flags: false,
				descr: resources["model.ApprovalPlanningStage"],
				members: {
					DEVELOPMENT: {value: 0, descr: resources["model.ApprovalPlanningStage.DEVELOPMENT"]},
					TEMPLATE: {value: 1, descr: resources["model.ApprovalPlanningStage.TEMPLATE"]},
					INSTANCE: {value: 2, descr: resources["model.ApprovalPlanningStage.INSTANCE"]}
				}
			},
			DocumentProcessType: {
				vt: "i4",
				flags: false,
				descr: resources["model.DocumentProcessType"],
				members: {
					DPT_CREATION: {value: 1, descr: resources["model.DocumentProcessType.DPT_CREATION"]},
					DPT_REGISTRATION: {value: 2, descr: resources["model.DocumentProcessType.DPT_REGISTRATION"]}
				}
			},
			NomenclatureStatus: {
				vt: "i4",
				flags: false,
				descr: resources["model.NomenclatureStatus"],
				members: {
					NS_CREATED: {value: 1, descr: resources["model.NomenclatureStatus.NS_CREATED"]},
					NS_ACTIVE: {value: 2, descr: resources["model.NomenclatureStatus.NS_ACTIVE"]},
					NS_CLOSED: {value: 3, descr: resources["model.NomenclatureStatus.NS_CLOSED"]},
					NS_DELETED: {value: 0, descr: resources["model.NomenclatureStatus.NS_DELETED"]}
				}
			},
			ApprovalQueueType: {
				vt: "i4",
				flags: false,
				descr: resources["model.ApprovalQueueType"],
				members: {
					APPROVE: {value: 0, descr: resources["model.ApprovalQueueType.APPROVE"]},
					SIGN: {value: 1, descr: resources["model.ApprovalQueueType.SIGN"]},
					APPROVE_ADDITIONAL: {value: 2, descr: resources["model.ApprovalQueueType.APPROVE_ADDITIONAL"]}
				}
			},
			IncomingDocumentAddresseeStatus: {
				vt: "i4",
				flags: false,
				descr: resources["model.IncomingDocumentAddresseeStatus"],
				members: {
					IDAS_NEW: {value: 0, descr: resources["model.IncomingDocumentAddresseeStatus.IDAS_NEW"]},
					IDAS_ON_REVIEW: {value: 1, descr: resources["model.IncomingDocumentAddresseeStatus.IDAS_ON_REVIEW"]},
					IDAS_REVIWED: {value: 2, descr: resources["model.IncomingDocumentAddresseeStatus.IDAS_REVIWED"]}
				}
			},
			OutgoingDocumentDeliveryStatus: {
				vt: "i4",
				flags: false,
				descr: resources["model.OutgoingDocumentDeliveryStatus"],
				members: {
					EMPTY: {value: 0, descr: resources["model.OutgoingDocumentDeliveryStatus.EMPTY"]},
					SENDING: {value: 1, descr: resources["model.OutgoingDocumentDeliveryStatus.SENDING"]},
					SENT: {value: 2, descr: resources["model.OutgoingDocumentDeliveryStatus.SENT"]},
					RETURNED: {value: 4, descr: resources["model.OutgoingDocumentDeliveryStatus.RETURNED"]}
				}
			},
			SearchType: {
				vt: "i4",
				flags: true,
				descr: resources["model.SearchType"],
				members: {
					CONTENT: {value: 1, descr: resources["model.SearchType.CONTENT"]},
					ATTRIBUTES: {value: 2, descr: resources["model.SearchType.ATTRIBUTES"]}
				}
			},
			CommissionType: {
				vt: "i4",
				flags: false,
				descr: resources["model.CommissionType"],
				members: {
					CT_TO_EXECUTE: {value: 1, descr: resources["model.CommissionType.CT_TO_EXECUTE"]},
					CT_TO_FAMILIARIZE: {value: 2, descr: resources["model.CommissionType.CT_TO_FAMILIARIZE"]}
				}
			},
			ApprovalEntityState: {
				vt: "i4",
				flags: false,
				descr: resources["model.ApprovalEntityState"],
				members: {
					PLANNED: {value: 0, descr: resources["model.ApprovalEntityState.PLANNED"]},
					ACTIVE: {value: 1, descr: resources["model.ApprovalEntityState.ACTIVE"]},
					PROCESSED: {value: 2, descr: resources["model.ApprovalEntityState.PROCESSED"]}
				}
			},
			ApprovalDecisionType: {
				vt: "i4",
				flags: false,
				descr: resources["model.ApprovalDecisionType"],
				members: {
					WAIT: {value: 0, descr: resources["model.ApprovalDecisionType.WAIT"]},
					REVOKED: {value: 1, descr: resources["model.ApprovalDecisionType.REVOKED"]},
					REJECTED: {value: 4, descr: resources["model.ApprovalDecisionType.REJECTED"]},
					APPROVED: {value: 8, descr: resources["model.ApprovalDecisionType.APPROVED"]},
					SIGNED: {value: 16, descr: resources["model.ApprovalDecisionType.SIGNED"]}
				}
			},
			ReportGenerationStatus: {
				vt: "i4",
				flags: false,
				descr: resources["model.ReportGenerationStatus"],
				members: {
					RGS_NOT_STARTED: {value: 1, descr: resources["model.ReportGenerationStatus.RGS_NOT_STARTED"]},
					RGS_PROCESSING: {value: 2, descr: resources["model.ReportGenerationStatus.RGS_PROCESSING"]},
					RGS_READY: {value: 3, descr: resources["model.ReportGenerationStatus.RGS_READY"]},
					RGS_ERROR: {value: 4, descr: resources["model.ReportGenerationStatus.RGS_ERROR"]}
				}
			},
			NomenclatureCaseRetentionPolicy: {
				vt: "i4",
				flags: false,
				descr: resources["model.NomenclatureCaseRetentionPolicy"],
				members: {
					NCRP_PERMANENT: {value: 1, descr: resources["model.NomenclatureCaseRetentionPolicy.NCRP_PERMANENT"]},
					NCRP_TEMPORARY: {value: 2, descr: resources["model.NomenclatureCaseRetentionPolicy.NCRP_TEMPORARY"]}
				}
			}
		},
		complex: {
		},
		entities: {
			PersonCorrespondent: {
				descr: resources["model.PersonCorrespondent"],
				base: "AbstractCorrespondent",
				props: {
					firstName: {descr: resources["model.PersonCorrespondent.firstName"], vt: "string" , nullable: false, maxLen: 64},
					secondName: {descr: resources["model.PersonCorrespondent.secondName"], vt: "string" , nullable: false, maxLen: 64},
					patronymic: {descr: resources["model.PersonCorrespondent.patronymic"], vt: "string" , nullable: true, maxLen: 64},
					name: {descr: resources["model.PersonCorrespondent.name"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			CommissionJournalFilter: {
				descr: resources["model.CommissionJournalFilter"],
				temp: true,
				props: {
					documentRegNumber: {descr: resources["model.CommissionJournalFilter.documentRegNumber"], vt: "string" , nullable: true, maxLen: 255},
					documentIdentifier: {descr: resources["model.CommissionJournalFilter.documentIdentifier"], vt: "string" , nullable: true, maxLen: 255},
					commissionNumber: {descr: resources["model.CommissionJournalFilter.commissionNumber"], vt: "string" , nullable: true, maxLen: 255},
					documentSummary: {descr: resources["model.CommissionJournalFilter.documentSummary"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.CommissionJournalFilter.description"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.CommissionJournalFilter.status"], vt: "object" , nullable: true, ref: "CommissionStatus"},
					commissionType: {descr: resources["model.CommissionJournalFilter.commissionType"], vt: "enum", flags: false  , nullable: true, ref: "CommissionType"},
					sentFrom: {descr: resources["model.CommissionJournalFilter.sentFrom"], vt: "date" , nullable: true},
					sentTo: {descr: resources["model.CommissionJournalFilter.sentTo"], vt: "date" , nullable: true},
					deadlineFrom: {descr: resources["model.CommissionJournalFilter.deadlineFrom"], vt: "date" , nullable: true},
					deadlineTo: {descr: resources["model.CommissionJournalFilter.deadlineTo"], vt: "date" , nullable: true},
					performer: {descr: resources["model.CommissionJournalFilter.performer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					author: {descr: resources["model.CommissionJournalFilter.author"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					overseer: {descr: resources["model.CommissionJournalFilter.overseer"], vt: "object" , nullable: true, ref: "EmployeePosition"}
				}
			},
			ContractRevokeReason: {
				descr: resources["model.ContractRevokeReason"],
				props: {
					name: {descr: resources["model.ContractRevokeReason.name"], vt: "text" , nullable: false, maxLen: 256},
					deleted: {descr: resources["model.ContractRevokeReason.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.ContractRevokeReason.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.ContractRevokeReason.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			InboxFilter: {
				descr: resources["model.InboxFilter"],
				temp: true,
				props: {
					taskId: {descr: resources["model.InboxFilter.taskId"], vt: "string" , nullable: true, maxLen: 255},
					taskType: {descr: resources["model.InboxFilter.taskType"], vt: "object" , nullable: true, ref: "TaskType"},
					documentType: {descr: resources["model.InboxFilter.documentType"], vt: "object" , nullable: true, ref: "DocumentType"},
					regNumber: {descr: resources["model.InboxFilter.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					identifier: {descr: resources["model.InboxFilter.identifier"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.InboxFilter.description"], vt: "string" , nullable: true, maxLen: 255},
					createdFrom: {descr: resources["model.InboxFilter.createdFrom"], vt: "date" , nullable: true},
					createdTo: {descr: resources["model.InboxFilter.createdTo"], vt: "date" , nullable: true},
					signatory: {descr: resources["model.InboxFilter.signatory"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					urgent: {descr: resources["model.InboxFilter.urgent"], vt: "boolean" , nullable: true},
					monitored: {descr: resources["model.InboxFilter.monitored"], vt: "boolean" , nullable: true}
				}
			},
			Employee: {
				descr: resources["model.Employee"],
				props: {
					user: {descr: resources["model.Employee.user"], vt: "object" , nullable: true, ref: "User", opposite: "employee", lazyLoad: true},
					firstName: {descr: resources["model.Employee.firstName"], vt: "text" , nullable: false, maxLen: 256},
					lastName: {descr: resources["model.Employee.lastName"], vt: "text" , nullable: false, maxLen: 256},
					patronymic: {descr: resources["model.Employee.patronymic"], vt: "text" , nullable: true, maxLen: 256},
					displayName: {descr: resources["model.Employee.displayName"], vt: "text" , nullable: false, maxLen: 768},
					deleted: {descr: resources["model.Employee.deleted"], vt: "boolean" , nullable: false, init: false},
					phone: {descr: resources["model.Employee.phone"], vt: "string" , nullable: true, maxLen: 32},
					email: {descr: resources["model.Employee.email"], vt: "string" , nullable: true, maxLen: 254},
					personnelNumber: {descr: resources["model.Employee.personnelNumber"], vt: "string" , nullable: true, maxLen: 32},
					avatar: {descr: resources["model.Employee.avatar"], vt: "binary" , nullable: true, contentType:"image", acceptFileTypes:".gif,.jpg,.png,.svg"},
					localeName: {descr: resources["model.Employee.localeName"], vt: "string" , nullable: false, init: "ru_RU", maxLen: 255},
					creationTime: {descr: resources["model.Employee.creationTime"], vt: "dateTimeTz" , nullable: true, readOnly: true},
					lastModifiedTime: {descr: resources["model.Employee.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					employeePositions: {descr: resources["model.Employee.employeePositions"], vt: "object" , nullable: true, ref: "EmployeePosition", opposite: "employee", many: true, lazyLoad: true}
				}
			},
			DeliveryOption: {
				descr: resources["model.DeliveryOption"],
				props: {
					systemName: {descr: resources["model.DeliveryOption.systemName"], vt: "text" , nullable: true, maxLen: 256},
					name: {descr: resources["model.DeliveryOption.name"], vt: "text" , nullable: false, maxLen: 256},
					deliveryType: {descr: resources["model.DeliveryOption.deliveryType"], vt: "object" , nullable: true, ref: "DeliveryType"},
					deleted: {descr: resources["model.DeliveryOption.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.DeliveryOption.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.DeliveryOption.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			Rendition: {
				descr: resources["model.Rendition"],
				props: {
					externalId: {descr: resources["model.Rendition.externalId"], vt: "string" , nullable: true, maxLen: 255},
					storageType: {descr: resources["model.Rendition.storageType"], vt: "string" , nullable: true, maxLen: 255},
					content: {descr: resources["model.Rendition.content"], vt: "binary" , nullable: true},
					storedExternalId: {descr: resources["model.Rendition.storedExternalId"], vt: "string" , nullable: true, maxLen: 255},
					storedStorageType: {descr: resources["model.Rendition.storedStorageType"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.Rendition.creationTime"], vt: "dateTimeTz" , nullable: false},
					modifyTime: {descr: resources["model.Rendition.modifyTime"], vt: "dateTimeTz" , nullable: false},
					sourceAttachmentId: {descr: resources["model.Rendition.sourceAttachmentId"], vt: "string" , nullable: false, maxLen: 255},
					additionalParams: {descr: resources["model.Rendition.additionalParams"], vt: "text" , nullable: false, maxLen: 2000}
				}
			},
			IncomingDocumentAddressee: {
				descr: resources["model.IncomingDocumentAddressee"],
				props: {
					document: {descr: resources["model.IncomingDocumentAddressee.document"], vt: "object" , nullable: false, ref: "IncomingDocument", opposite: "addressees"},
					addressee: {descr: resources["model.IncomingDocumentAddressee.addressee"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					incomingDocumentAddresseeStatus: {descr: resources["model.IncomingDocumentAddressee.incomingDocumentAddresseeStatus"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "IncomingDocumentAddresseeStatus"},
					aclId: {descr: resources["model.IncomingDocumentAddressee.aclId"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.IncomingDocumentAddressee.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.IncomingDocumentAddressee.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			SearchResultDocumentWithAttachments: {
				descr: resources["model.SearchResultDocumentWithAttachments"],
				temp: true,
				props: {
					document: {descr: resources["model.SearchResultDocumentWithAttachments.document"], vt: "object" , nullable: false, ref: "AbstractDocument"},
					attachments: {descr: resources["model.SearchResultDocumentWithAttachments.attachments"], vt: "object" , nullable: true, ref: "DocumentAttachment", many: true, lazyLoad: true}
				}
			},
			CurrencyFilter: {
				descr: resources["model.CurrencyFilter"],
				temp: true,
				props: {
					searchString: {descr: resources["model.CurrencyFilter.searchString"], vt: "string" , nullable: true, maxLen: 255},
					allowDeleted: {descr: resources["model.CurrencyFilter.allowDeleted"], vt: "boolean" , nullable: false, init: false}
				}
			},
			DocumentSubType: {
				descr: resources["model.DocumentSubType"],
				base: "DocumentType",
				props: {
				}
			},
			Dashboard: {
				descr: resources["model.Dashboard"],
				props: {
					ownerId: {descr: resources["model.Dashboard.ownerId"], vt: "string" , nullable: false, maxLen: 255},
					dashboardType: {descr: resources["model.Dashboard.dashboardType"], vt: "string" , nullable: false, init: "default", maxLen: 255},
					params: {descr: resources["model.Dashboard.params"], vt: "text" , nullable: true, maxLen: 2000},
					creationTime: {descr: resources["model.Dashboard.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Dashboard.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			CreateDocumentProcessParams: {
				descr: resources["model.CreateDocumentProcessParams"],
				temp: true,
				props: {
					organization: {descr: resources["model.CreateDocumentProcessParams.organization"], vt: "object" , nullable: false, ref: "Company"},
					subtype: {descr: resources["model.CreateDocumentProcessParams.subtype"], vt: "object" , nullable: false, ref: "DocumentSubType"},
					template: {descr: resources["model.CreateDocumentProcessParams.template"], vt: "object" , nullable: false, ref: "DocumentTemplate"}
				}
			},
			AbstractCorrespondent: {
				descr: resources["model.AbstractCorrespondent"],
				abstract: true,
				props: {
					comment: {descr: resources["model.AbstractCorrespondent.comment"], vt: "text" , nullable: true, maxLen: 2000},
					name: {descr: resources["model.AbstractCorrespondent.name"], vt: "string" , nullable: false, maxLen: 255},
					deleted: {descr: resources["model.AbstractCorrespondent.deleted"], vt: "boolean" , nullable: false, init: false},
					contacts: {descr: resources["model.AbstractCorrespondent.contacts"], vt: "object" , nullable: true, ref: "AbstractCorrespondentContact", opposite: "correspondent", many: true, lazyLoad: true},
					creationTime: {descr: resources["model.AbstractCorrespondent.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.AbstractCorrespondent.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentTypeTreeFilter: {
				descr: resources["model.DocumentTypeTreeFilter"],
				temp: true,
				props: {
					company: {descr: resources["model.DocumentTypeTreeFilter.company"], vt: "object" , nullable: false, ref: "Company"},
					name: {descr: resources["model.DocumentTypeTreeFilter.name"], vt: "string" , nullable: true, maxLen: 255},
					allowDeleted: {descr: resources["model.DocumentTypeTreeFilter.allowDeleted"], vt: "boolean" , nullable: false, init: false}
				}
			},
			OrgStructureRootElement: {
				descr: resources["model.OrgStructureRootElement"],
				base: "Department",
				props: {
				}
			},
			InboxViewItem: {
				descr: resources["model.InboxViewItem"],
				temp: true,
				props: {
					taskEntityId: {descr: resources["model.InboxViewItem.taskEntityId"], vt: "string" , nullable: false, maxLen: 255},
					taskEntityType: {descr: resources["model.InboxViewItem.taskEntityType"], vt: "string" , nullable: false, maxLen: 255},
					hasAttachment: {descr: resources["model.InboxViewItem.hasAttachment"], vt: "boolean" , nullable: false},
					urgent: {descr: resources["model.InboxViewItem.urgent"], vt: "boolean" , nullable: false},
					taskTypeId: {descr: resources["model.InboxViewItem.taskTypeId"], vt: "string" , nullable: false, maxLen: 255},
					taskTypeSystemName: {descr: resources["model.InboxViewItem.taskTypeSystemName"], vt: "string" , nullable: false, maxLen: 255},
					taskTypeName: {descr: resources["model.InboxViewItem.taskTypeName"], vt: "string" , nullable: false, maxLen: 255},
					documentKindId: {descr: resources["model.InboxViewItem.documentKindId"], vt: "string" , nullable: true, maxLen: 255},
					documentKindName: {descr: resources["model.InboxViewItem.documentKindName"], vt: "string" , nullable: true, maxLen: 255},
					documentTypeId: {descr: resources["model.InboxViewItem.documentTypeId"], vt: "string" , nullable: true, maxLen: 255},
					documentTypeName: {descr: resources["model.InboxViewItem.documentTypeName"], vt: "string" , nullable: true, maxLen: 255},
					regNumber: {descr: resources["model.InboxViewItem.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					identifier: {descr: resources["model.InboxViewItem.identifier"], vt: "string" , nullable: true, maxLen: 255},
					created: {descr: resources["model.InboxViewItem.created"], vt: "dateTimeTz" , nullable: false},
					modified: {descr: resources["model.InboxViewItem.modified"], vt: "dateTimeTz" , nullable: false},
					dueTime: {descr: resources["model.InboxViewItem.dueTime"], vt: "dateTimeTz" , nullable: true},
					performerId: {descr: resources["model.InboxViewItem.performerId"], vt: "string" , nullable: true, maxLen: 255},
					performerName: {descr: resources["model.InboxViewItem.performerName"], vt: "string" , nullable: true, maxLen: 255},
					description: {descr: resources["model.InboxViewItem.description"], vt: "text" , nullable: true, maxLen: 2000},
					ownerId: {descr: resources["model.InboxViewItem.ownerId"], vt: "string" , nullable: true, maxLen: 255},
					taskStatus: {descr: resources["model.InboxViewItem.taskStatus"], vt: "string" , nullable: true, maxLen: 255},
					commissionDescription: {descr: resources["model.InboxViewItem.commissionDescription"], vt: "string" , nullable: true, maxLen: 255},
					documentRegDate: {descr: resources["model.InboxViewItem.documentRegDate"], vt: "date" , nullable: true},
					lockedById: {descr: resources["model.InboxViewItem.lockedById"], vt: "string" , nullable: true, maxLen: 255},
					lockedByType: {descr: resources["model.InboxViewItem.lockedByType"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			AbstractCorrespondentContact: {
				descr: resources["model.AbstractCorrespondentContact"],
				abstract: true,
				props: {
					correspondent: {descr: resources["model.AbstractCorrespondentContact.correspondent"], vt: "object" , nullable: true, ref: "AbstractCorrespondent", opposite: "contacts"},
					discriminator: {descr: resources["model.AbstractCorrespondentContact.discriminator"], vt: "string" , nullable: true, maxLen: 32},
					name: {descr: resources["model.AbstractCorrespondentContact.name"], vt: "text" , nullable: false, maxLen: 1000},
					deleted: {descr: resources["model.AbstractCorrespondentContact.deleted"], vt: "boolean" , nullable: false, init: false},
					contactType: {descr: resources["model.AbstractCorrespondentContact.contactType"], vt: "object" , nullable: false, ref: "CorrespondentContactType"},
					contactKind: {descr: resources["model.AbstractCorrespondentContact.contactKind"], vt: "object" , nullable: false, ref: "CorrespondentContactKind"},
					primary: {descr: resources["model.AbstractCorrespondentContact.primary"], vt: "boolean" , nullable: false, init: false},
					comment: {descr: resources["model.AbstractCorrespondentContact.comment"], vt: "text" , nullable: true, maxLen: 2000},
					creationTime: {descr: resources["model.AbstractCorrespondentContact.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.AbstractCorrespondentContact.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			ContractorCreationParams: {
				descr: resources["model.ContractorCreationParams"],
				temp: true,
				props: {
					correspondent: {descr: resources["model.ContractorCreationParams.correspondent"], vt: "object" , nullable: true, ref: "CompanyCorrespondent"}
				}
			},
			OutgoingDocumentAddressee: {
				descr: resources["model.OutgoingDocumentAddressee"],
				props: {
					document: {descr: resources["model.OutgoingDocumentAddressee.document"], vt: "object" , nullable: false, ref: "OutgoingDocument", opposite: "addressees", lazyLoad: true},
					deliveryOption: {descr: resources["model.OutgoingDocumentAddressee.deliveryOption"], vt: "object" , nullable: false, ref: "DeliveryOption"},
					correspondent: {descr: resources["model.OutgoingDocumentAddressee.correspondent"], vt: "object" , nullable: false, ref: "AbstractCorrespondent"},
					address: {descr: resources["model.OutgoingDocumentAddressee.address"], vt: "object" , nullable: true, ref: "CorrespondentAddress"},
					fax: {descr: resources["model.OutgoingDocumentAddressee.fax"], vt: "object" , nullable: true, ref: "CorrespondentContactDefault"},
					email: {descr: resources["model.OutgoingDocumentAddressee.email"], vt: "object" , nullable: true, ref: "CorrespondentContactDefault"},
					deliveryStatus: {descr: resources["model.OutgoingDocumentAddressee.deliveryStatus"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "OutgoingDocumentDeliveryStatus"},
					aclId: {descr: resources["model.OutgoingDocumentAddressee.aclId"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.OutgoingDocumentAddressee.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.OutgoingDocumentAddressee.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			Approver: {
				descr: resources["model.Approver"],
				props: {
					approver: {descr: resources["model.Approver.approver"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					queue: {descr: resources["model.Approver.queue"], vt: "object" , nullable: false, ref: "ApprovalQueue", opposite: "approvers"},
					createdOn: {descr: resources["model.Approver.createdOn"], vt: "enum", flags: false  , nullable: false, init: 2, ref: "ApprovalPlanningStage"},
					decision: {descr: resources["model.Approver.decision"], vt: "object" , nullable: true, ref: "ApprovalDecision", opposite: "approver"},
					state: {descr: resources["model.Approver.state"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "ApprovalEntityState"},
					aclId: {descr: resources["model.Approver.aclId"], vt: "string" , nullable: false, maxLen: 255},
					queues: {descr: resources["model.Approver.queues"], vt: "object" , nullable: true, ref: "ApprovalQueue", opposite: "owner", many: true, lazyLoad: true}
				}
			},
			ApprovalIteration: {
				descr: resources["model.ApprovalIteration"],
				props: {
					document: {descr: resources["model.ApprovalIteration.document"], vt: "object" , nullable: false, ref: "AbstractDocument", lazyLoad: true},
					position: {descr: resources["model.ApprovalIteration.position"], vt: "i4" , nullable: false},
					state: {descr: resources["model.ApprovalIteration.state"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "ApprovalEntityState"},
					aclId: {descr: resources["model.ApprovalIteration.aclId"], vt: "string" , nullable: false, maxLen: 255},
					queues: {descr: resources["model.ApprovalIteration.queues"], vt: "object" , nullable: true, ref: "ApprovalQueue", opposite: "iteration", many: true, lazyLoad: true}
				}
			},
			CompanyPersonCorrespondent: {
				descr: resources["model.CompanyPersonCorrespondent"],
				base: "AbstractCorrespondent",
				props: {
					parent: {descr: resources["model.CompanyPersonCorrespondent.parent"], vt: "object" , nullable: false, ref: "CompanyCorrespondent", opposite: "persons"},
					firstName: {descr: resources["model.CompanyPersonCorrespondent.firstName"], vt: "string" , nullable: false, maxLen: 64},
					secondName: {descr: resources["model.CompanyPersonCorrespondent.secondName"], vt: "string" , nullable: false, maxLen: 64},
					patronymic: {descr: resources["model.CompanyPersonCorrespondent.patronymic"], vt: "string" , nullable: true, maxLen: 64},
					position: {descr: resources["model.CompanyPersonCorrespondent.position"], vt: "string" , nullable: false, maxLen: 255},
					primary: {descr: resources["model.CompanyPersonCorrespondent.primary"], vt: "boolean" , nullable: false, init: false},
					department: {descr: resources["model.CompanyPersonCorrespondent.department"], vt: "string" , nullable: true, maxLen: 255},
					name: {descr: resources["model.CompanyPersonCorrespondent.name"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			Assistant: {
				descr: resources["model.Assistant"],
				props: {
					superior: {descr: resources["model.Assistant.superior"], vt: "object" , nullable: false, ref: "EmployeePosition", opposite: "assistants"},
					assistedBy: {descr: resources["model.Assistant.assistedBy"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					creationTime: {descr: resources["model.Assistant.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Assistant.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			ContractRevokeReasonFilter: {
				descr: resources["model.ContractRevokeReasonFilter"],
				temp: true,
				props: {
					searchString: {descr: resources["model.ContractRevokeReasonFilter.searchString"], vt: "string" , nullable: true, maxLen: 255},
					allowDeleted: {descr: resources["model.ContractRevokeReasonFilter.allowDeleted"], vt: "boolean" , nullable: false, init: false}
				}
			},
			Currency: {
				descr: resources["model.Currency"],
				props: {
					name: {descr: resources["model.Currency.name"], vt: "text" , nullable: false, maxLen: 256},
					codeAlfa: {descr: resources["model.Currency.codeAlfa"], vt: "string" , nullable: false, maxLen: 16},
					codeNumber: {descr: resources["model.Currency.codeNumber"], vt: "string" , nullable: false, maxLen: 10},
					deleted: {descr: resources["model.Currency.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.Currency.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Currency.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			AbstractDocumentRelation: {
				descr: resources["model.AbstractDocumentRelation"],
				abstract: true,
				props: {
					relationType: {descr: resources["model.AbstractDocumentRelation.relationType"], vt: "object" , nullable: false, ref: "RelationType"},
					source: {descr: resources["model.AbstractDocumentRelation.source"], vt: "object" , nullable: false, ref: "AbstractDocument", opposite: "relations"},
					aclId: {descr: resources["model.AbstractDocumentRelation.aclId"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.AbstractDocumentRelation.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.AbstractDocumentRelation.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			Comment: {
				descr: resources["model.Comment"],
				props: {
					parent: {descr: resources["model.Comment.parent"], vt: "object" , nullable: true, ref: "Comment"},
					entityId: {descr: resources["model.Comment.entityId"], vt: "string" , nullable: false, maxLen: 255},
					entityType: {descr: resources["model.Comment.entityType"], vt: "string" , nullable: false, maxLen: 255},
					author: {descr: resources["model.Comment.author"], vt: "object" , nullable: false, ref: "Employee"},
					content: {descr: resources["model.Comment.content"], vt: "text" , nullable: false, maxLen: 2000},
					resolved: {descr: resources["model.Comment.resolved"], vt: "boolean" , nullable: false, init: false},
					aclId: {descr: resources["model.Comment.aclId"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.Comment.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Comment.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DisciplineReportParams: {
				descr: resources["model.DisciplineReportParams"],
				base: "AbstractReportParams",
				props: {
					performers: {descr: resources["model.DisciplineReportParams.performers"], vt: "object" , nullable: true, ref: "AbstractOrgStructureElement", many: true},
					authors: {descr: resources["model.DisciplineReportParams.authors"], vt: "object" , nullable: true, ref: "AbstractOrgStructureElement", many: true},
					overseers: {descr: resources["model.DisciplineReportParams.overseers"], vt: "object" , nullable: true, ref: "AbstractOrgStructureElement", many: true},
					createdDateFrom: {descr: resources["model.DisciplineReportParams.createdDateFrom"], vt: "date" , nullable: true},
					createdDateTo: {descr: resources["model.DisciplineReportParams.createdDateTo"], vt: "date" , nullable: true},
					plannedDateFrom: {descr: resources["model.DisciplineReportParams.plannedDateFrom"], vt: "date" , nullable: true},
					plannedDateTo: {descr: resources["model.DisciplineReportParams.plannedDateTo"], vt: "date" , nullable: true},
					documentTypes: {descr: resources["model.DisciplineReportParams.documentTypes"], vt: "object" , nullable: true, ref: "DocumentType", many: true},
					documentKinds: {descr: resources["model.DisciplineReportParams.documentKinds"], vt: "object" , nullable: true, ref: "DocumentKind", many: true},
					groupByDocumentKind: {descr: resources["model.DisciplineReportParams.groupByDocumentKind"], vt: "boolean" , nullable: false, init: false}
				}
			},
			CommissionPerformerStatus: {
				descr: resources["model.CommissionPerformerStatus"],
				props: {
					name: {descr: resources["model.CommissionPerformerStatus.name"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					systemName: {descr: resources["model.CommissionPerformerStatus.systemName"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					creationTime: {descr: resources["model.CommissionPerformerStatus.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CommissionPerformerStatus.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			Company: {
				descr: resources["model.Company"],
				base: "Department",
				props: {
					street: {descr: resources["model.Company.street"], vt: "text" , nullable: true, maxLen: 256},
					building: {descr: resources["model.Company.building"], vt: "string" , nullable: true, maxLen: 64},
					apartment: {descr: resources["model.Company.apartment"], vt: "string" , nullable: true, maxLen: 32},
					city: {descr: resources["model.Company.city"], vt: "text" , nullable: true, maxLen: 256},
					subregion: {descr: resources["model.Company.subregion"], vt: "text" , nullable: true, maxLen: 256},
					region: {descr: resources["model.Company.region"], vt: "text" , nullable: true, maxLen: 256},
					country: {descr: resources["model.Company.country"], vt: "string" , nullable: true, maxLen: 128},
					postalCode: {descr: resources["model.Company.postalCode"], vt: "string" , nullable: true, maxLen: 32},
					email: {descr: resources["model.Company.email"], vt: "string" , nullable: true, maxLen: 254},
					fax: {descr: resources["model.Company.fax"], vt: "string" , nullable: true, maxLen: 64}
				}
			},
			PositionDescription: {
				descr: resources["model.PositionDescription"],
				props: {
					name: {descr: resources["model.PositionDescription.name"], vt: "text" , nullable: false, maxLen: 256},
					deleted: {descr: resources["model.PositionDescription.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.PositionDescription.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.PositionDescription.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentAttachment: {
				descr: resources["model.DocumentAttachment"],
				base: "Attachment",
				props: {
					document: {descr: resources["model.DocumentAttachment.document"], vt: "object" , nullable: false, ref: "AbstractDocument", opposite: "attachment", lazyLoad: true},
					primary: {descr: resources["model.DocumentAttachment.primary"], vt: "boolean" , nullable: false, init: false},
					versionKey: {descr: resources["model.DocumentAttachment.versionKey"], vt: "string" , nullable: false, maxLen: 255},
					versionLabel: {descr: resources["model.DocumentAttachment.versionLabel"], vt: "i4" , nullable: false, init: 1},
					author: {descr: resources["model.DocumentAttachment.author"], vt: "object" , nullable: true, ref: "EmployeePosition", lazyLoad: true},
					aclId: {descr: resources["model.DocumentAttachment.aclId"], vt: "string" , nullable: true, maxLen: 255},
					lockInfo: {descr: resources["model.DocumentAttachment.lockInfo"], vt: "object" , nullable: true, ref: "LockInfoDefault"}
				}
			},
			CommissionPerformerReportStatus: {
				descr: resources["model.CommissionPerformerReportStatus"],
				props: {
					name: {descr: resources["model.CommissionPerformerReportStatus.name"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					systemName: {descr: resources["model.CommissionPerformerReportStatus.systemName"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					creationTime: {descr: resources["model.CommissionPerformerReportStatus.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CommissionPerformerReportStatus.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			ContractDocumentContractor: {
				descr: resources["model.ContractDocumentContractor"],
				props: {
					document: {descr: resources["model.ContractDocumentContractor.document"], vt: "object" , nullable: false, ref: "ContractDocument", opposite: "contractors", lazyLoad: true},
					contractor: {descr: resources["model.ContractDocumentContractor.contractor"], vt: "object" , nullable: false, ref: "Contractor"},
					number: {descr: resources["model.ContractDocumentContractor.number"], vt: "string" , nullable: true, maxLen: 128},
					signingDate: {descr: resources["model.ContractDocumentContractor.signingDate"], vt: "date" , nullable: true},
					signerName: {descr: resources["model.ContractDocumentContractor.signerName"], vt: "text" , nullable: true, maxLen: 1024},
					warrantName: {descr: resources["model.ContractDocumentContractor.warrantName"], vt: "string" , nullable: true, maxLen: 128},
					aclId: {descr: resources["model.ContractDocumentContractor.aclId"], vt: "string" , nullable: false, maxLen: 255},
					creationTime: {descr: resources["model.ContractDocumentContractor.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.ContractDocumentContractor.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentProcessTypeFakeModel: {
				descr: resources["model.DocumentProcessTypeFakeModel"],
				temp: true,
				props: {
					processType: {descr: resources["model.DocumentProcessTypeFakeModel.processType"], vt: "enum", flags: false  , nullable: true, ref: "DocumentProcessType"}
				}
			},
			OutgoingDocumentJournalFilter: {
				descr: resources["model.OutgoingDocumentJournalFilter"],
				temp: true,
				props: {
					regNumber: {descr: resources["model.OutgoingDocumentJournalFilter.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					identifier: {descr: resources["model.OutgoingDocumentJournalFilter.identifier"], vt: "string" , nullable: true, maxLen: 255},
					summary: {descr: resources["model.OutgoingDocumentJournalFilter.summary"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.OutgoingDocumentJournalFilter.status"], vt: "object" , nullable: true, ref: "DocumentStatus"},
					performer: {descr: resources["model.OutgoingDocumentJournalFilter.performer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					regDateFrom: {descr: resources["model.OutgoingDocumentJournalFilter.regDateFrom"], vt: "date" , nullable: true},
					regDateTo: {descr: resources["model.OutgoingDocumentJournalFilter.regDateTo"], vt: "date" , nullable: true},
					createdFrom: {descr: resources["model.OutgoingDocumentJournalFilter.createdFrom"], vt: "date" , nullable: true},
					createdTo: {descr: resources["model.OutgoingDocumentJournalFilter.createdTo"], vt: "date" , nullable: true},
					correspondent: {descr: resources["model.OutgoingDocumentJournalFilter.correspondent"], vt: "object" , nullable: true, ref: "AbstractCorrespondent"},
					nomenclatureCase: {descr: resources["model.OutgoingDocumentJournalFilter.nomenclatureCase"], vt: "object" , nullable: true, ref: "NomenclatureCase"}
				}
			},
			AbstractDocument: {
				descr: resources["model.AbstractDocument"],
				abstract: true,
				props: {
					discriminator: {descr: resources["model.AbstractDocument.discriminator"], vt: "string" , nullable: true, maxLen: 32},
					documentKind: {descr: resources["model.AbstractDocument.documentKind"], vt: "object" , nullable: true, ref: "DocumentKind"},
					documentType: {descr: resources["model.AbstractDocument.documentType"], vt: "object" , nullable: false, ref: "DocumentSubType"},
					identifier: {descr: resources["model.AbstractDocument.identifier"], vt: "string" , nullable: false, maxLen: 255},
					creationDate: {descr: resources["model.AbstractDocument.creationDate"], vt: "date" , nullable: false},
					regNumber: {descr: resources["model.AbstractDocument.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					regDate: {descr: resources["model.AbstractDocument.regDate"], vt: "date" , nullable: true},
					summary: {descr: resources["model.AbstractDocument.summary"], vt: "text" , nullable: true, maxLen: 256},
					organization: {descr: resources["model.AbstractDocument.organization"], vt: "object" , nullable: true, ref: "Company"},
					author: {descr: resources["model.AbstractDocument.author"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					status: {descr: resources["model.AbstractDocument.status"], vt: "object" , nullable: false, ref: "DocumentStatus"},
					permission: {descr: resources["model.AbstractDocument.permission"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "DocumentPermission"},
					aclId: {descr: resources["model.AbstractDocument.aclId"], vt: "string" , nullable: true, maxLen: 255},
					nomenclatureCase: {descr: resources["model.AbstractDocument.nomenclatureCase"], vt: "object" , nullable: true, ref: "NomenclatureCase"},
					attachment: {descr: resources["model.AbstractDocument.attachment"], vt: "object" , nullable: true, ref: "DocumentAttachment", opposite: "document", many: true, lazyLoad: true},
					relations: {descr: resources["model.AbstractDocument.relations"], vt: "object" , nullable: true, ref: "AbstractDocumentRelation", opposite: "source", many: true, lazyLoad: true},
					creationTime: {descr: resources["model.AbstractDocument.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.AbstractDocument.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			LockInfoDefault: {
				descr: resources["model.LockInfoDefault"],
				props: {
					lockedObjectType: {descr: resources["model.LockInfoDefault.lockedObjectType"], vt: "string" , nullable: false, maxLen: 255},
					lockType: {descr: resources["model.LockInfoDefault.lockType"], vt: "string" , nullable: false, maxLen: 255},
					lockedById: {descr: resources["model.LockInfoDefault.lockedById"], vt: "string" , nullable: false, maxLen: 255},
					details: {descr: resources["model.LockInfoDefault.details"], vt: "text" , nullable: true, maxLen: 2000},
					creationTime: {descr: resources["model.LockInfoDefault.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.LockInfoDefault.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			TempContent: {
				descr: resources["model.TempContent"],
				props: {
					storageType: {descr: resources["model.TempContent.storageType"], vt: "string" , nullable: true, maxLen: 255},
					externalId: {descr: resources["model.TempContent.externalId"], vt: "string" , nullable: true, maxLen: 255},
					storedExternalId: {descr: resources["model.TempContent.storedExternalId"], vt: "string" , nullable: true, maxLen: 255},
					storedStorageType: {descr: resources["model.TempContent.storedStorageType"], vt: "string" , nullable: true, maxLen: 255},
					content: {descr: resources["model.TempContent.content"], vt: "binary" , nullable: true},
					creationTime: {descr: resources["model.TempContent.creationTime"], vt: "dateTimeTz" , nullable: false, init: "now"},
					userName: {descr: resources["model.TempContent.userName"], vt: "string" , nullable: true, maxLen: 255},
					masterContent: {descr: resources["model.TempContent.masterContent"], vt: "object" , nullable: true, ref: "TempContent", opposite: "dependentContent"},
					dependentContent: {descr: resources["model.TempContent.dependentContent"], vt: "object" , nullable: true, ref: "TempContent", opposite: "masterContent", many: true, lazyLoad: true},
					additionalParams: {descr: resources["model.TempContent.additionalParams"], vt: "text" , nullable: true, maxLen: 2000}
				}
			},
			CommissionPerformer: {
				descr: resources["model.CommissionPerformer"],
				props: {
					commission: {descr: resources["model.CommissionPerformer.commission"], vt: "object" , nullable: false, ref: "Commission", opposite: "performers"},
					performer: {descr: resources["model.CommissionPerformer.performer"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					mainPerformer: {descr: resources["model.CommissionPerformer.mainPerformer"], vt: "boolean" , nullable: false, init: false},
					status: {descr: resources["model.CommissionPerformer.status"], vt: "object" , nullable: false, ref: "CommissionPerformerStatus"},
					deadline: {descr: resources["model.CommissionPerformer.deadline"], vt: "date" , nullable: true},
					completed: {descr: resources["model.CommissionPerformer.completed"], vt: "dateTimeTz" , nullable: true},
					lastReportSent: {descr: resources["model.CommissionPerformer.lastReportSent"], vt: "dateTimeTz" , nullable: true},
					aclId: {descr: resources["model.CommissionPerformer.aclId"], vt: "string" , nullable: true, maxLen: 255},
					reports: {descr: resources["model.CommissionPerformer.reports"], vt: "object" , nullable: true, ref: "CommissionPerformerReport", opposite: "performer", many: true},
					childCommissions: {descr: resources["model.CommissionPerformer.childCommissions"], vt: "object" , nullable: true, ref: "Commission", opposite: "parent", many: true},
					creationTime: {descr: resources["model.CommissionPerformer.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CommissionPerformer.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			WeekBasedWorkingCalendarDateInterval: {
				descr: resources["model.WeekBasedWorkingCalendarDateInterval"],
				props: {
					calendar: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.calendar"], vt: "object" , nullable: false, ref: "WeekBasedWorkingCalendar", opposite: "exceptions"},
					intervalType: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.intervalType"], vt: "string" , nullable: false, maxLen: 255},
					date: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.date"], vt: "date" , nullable: false},
					begin: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.begin"], vt: "time" , nullable: true},
					end: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.end"], vt: "time" , nullable: true},
					description: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.description"], vt: "text" , nullable: true, maxLen: 2000},
					creationTime: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.WeekBasedWorkingCalendarDateInterval.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			CorrespondentAddress: {
				descr: resources["model.CorrespondentAddress"],
				base: "AbstractCorrespondentContact",
				props: {
					country: {descr: resources["model.CorrespondentAddress.country"], vt: "string" , nullable: false, maxLen: 64},
					region: {descr: resources["model.CorrespondentAddress.region"], vt: "string" , nullable: true, maxLen: 64},
					subregion: {descr: resources["model.CorrespondentAddress.subregion"], vt: "string" , nullable: true, maxLen: 64},
					city: {descr: resources["model.CorrespondentAddress.city"], vt: "string" , nullable: false, maxLen: 64},
					street: {descr: resources["model.CorrespondentAddress.street"], vt: "string" , nullable: false, maxLen: 64},
					building: {descr: resources["model.CorrespondentAddress.building"], vt: "string" , nullable: false, maxLen: 64},
					appartment: {descr: resources["model.CorrespondentAddress.appartment"], vt: "string" , nullable: true, maxLen: 64},
					postalCode: {descr: resources["model.CorrespondentAddress.postalCode"], vt: "string" , nullable: true, maxLen: 32}
				}
			},
			Commission: {
				descr: resources["model.Commission"],
				props: {
					parent: {descr: resources["model.Commission.parent"], vt: "object" , nullable: true, ref: "CommissionPerformer", opposite: "childCommissions"},
					description: {descr: resources["model.Commission.description"], vt: "text" , nullable: true, maxLen: 2000},
					status: {descr: resources["model.Commission.status"], vt: "object" , nullable: false, ref: "CommissionStatus"},
					creator: {descr: resources["model.Commission.creator"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					author: {descr: resources["model.Commission.author"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					overseer: {descr: resources["model.Commission.overseer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					reportShouldBeCheckedByAuthor: {descr: resources["model.Commission.reportShouldBeCheckedByAuthor"], vt: "boolean" , nullable: false, init: true},
					deadline: {descr: resources["model.Commission.deadline"], vt: "date" , nullable: true},
					toFamiliarize: {descr: resources["model.Commission.toFamiliarize"], vt: "boolean" , nullable: false, init: false},
					completed: {descr: resources["model.Commission.completed"], vt: "dateTimeTz" , nullable: true},
					creationDate: {descr: resources["model.Commission.creationDate"], vt: "dateTimeTz" , nullable: true, init: "now"},
					sent: {descr: resources["model.Commission.sent"], vt: "dateTimeTz" , nullable: true},
					regNumber: {descr: resources["model.Commission.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					reasonToRevoke: {descr: resources["model.Commission.reasonToRevoke"], vt: "string" , nullable: true, maxLen: 255},
					container: {descr: resources["model.Commission.container"], vt: "object" , nullable: false, ref: "AbstractDocument"},
					performers: {descr: resources["model.Commission.performers"], vt: "object" , nullable: true, ref: "CommissionPerformer", opposite: "commission", many: true},
					aclId: {descr: resources["model.Commission.aclId"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.Commission.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Commission.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			Bookmark: {
				descr: resources["model.Bookmark"],
				props: {
					name: {descr: resources["model.Bookmark.name"], vt: "text" , nullable: false, maxLen: 256},
					iconCode: {descr: resources["model.Bookmark.iconCode"], vt: "string" , nullable: true, maxLen: 64},
					type: {descr: resources["model.Bookmark.type"], vt: "enum", flags: false  , nullable: true, ref: "BookmarkType"},
					params: {descr: resources["model.Bookmark.params"], vt: "text" , nullable: false, maxLen: 1024},
					employee: {descr: resources["model.Bookmark.employee"], vt: "object" , nullable: false, ref: "Employee"}
				}
			},
			ApprovalDecision: {
				descr: resources["model.ApprovalDecision"],
				props: {
					decisionType: {descr: resources["model.ApprovalDecision.decisionType"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "ApprovalDecisionType"},
					comment: {descr: resources["model.ApprovalDecision.comment"], vt: "text" , nullable: true, maxLen: 2000},
					response: {descr: resources["model.ApprovalDecision.response"], vt: "text" , nullable: true, maxLen: 2000},
					approver: {descr: resources["model.ApprovalDecision.approver"], vt: "object" , nullable: false, ref: "Approver", opposite: "decision"},
					performer: {descr: resources["model.ApprovalDecision.performer"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					aclId: {descr: resources["model.ApprovalDecision.aclId"], vt: "string" , nullable: false, maxLen: 255},
					decisionTime: {descr: resources["model.ApprovalDecision.decisionTime"], vt: "dateTimeTz" , nullable: true}
				}
			},
			AbstractOrgStructureElement: {
				descr: resources["model.AbstractOrgStructureElement"],
				abstract: true,
				props: {
					name: {descr: resources["model.AbstractOrgStructureElement.name"], vt: "string" , nullable: false, maxLen: 255},
					deleted: {descr: resources["model.AbstractOrgStructureElement.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.AbstractOrgStructureElement.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.AbstractOrgStructureElement.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			CorrespondentContactDefault: {
				descr: resources["model.CorrespondentContactDefault"],
				base: "AbstractCorrespondentContact",
				props: {
				}
			},
			SmartSearchFilter: {
				descr: resources["model.SmartSearchFilter"],
				temp: true,
				props: {
					searchString: {descr: resources["model.SmartSearchFilter.searchString"], vt: "string" , nullable: true, maxLen: 255},
					searchType: {descr: resources["model.SmartSearchFilter.searchType"], vt: "enum", flags: true  , nullable: false, init: 3, ref: "SearchType"},
					documentTypeId: {descr: resources["model.SmartSearchFilter.documentTypeId"], vt: "string" , nullable: true, maxLen: 255},
					searchInCommissions: {descr: resources["model.SmartSearchFilter.searchInCommissions"], vt: "boolean" , nullable: false}
				}
			},
			WeekBasedWorkingCalendar: {
				descr: resources["model.WeekBasedWorkingCalendar"],
				props: {
					description: {descr: resources["model.WeekBasedWorkingCalendar.description"], vt: "text" , nullable: true, maxLen: 2000},
					systemName: {descr: resources["model.WeekBasedWorkingCalendar.systemName"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.WeekBasedWorkingCalendar.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.WeekBasedWorkingCalendar.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					intervals: {descr: resources["model.WeekBasedWorkingCalendar.intervals"], vt: "object" , nullable: true, ref: "WeekBasedWorkingCalendarDayInterval", opposite: "calendar", many: true},
					exceptions: {descr: resources["model.WeekBasedWorkingCalendar.exceptions"], vt: "object" , nullable: true, ref: "WeekBasedWorkingCalendarDateInterval", opposite: "calendar", many: true, lazyLoad: true}
				}
			},
			Report: {
				descr: resources["model.Report"],
				props: {
					author: {descr: resources["model.Report.author"], vt: "object" , nullable: true, ref: "User"},
					reportContainers: {descr: resources["model.Report.reportContainers"], vt: "object" , nullable: true, ref: "ReportContent", opposite: "report", many: true, lazyLoad: true},
					deletionTime: {descr: resources["model.Report.deletionTime"], vt: "dateTimeTz" , nullable: true},
					creationTime: {descr: resources["model.Report.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Report.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			ReportContent: {
				descr: resources["model.ReportContent"],
				props: {
					report: {descr: resources["model.ReportContent.report"], vt: "object" , nullable: true, ref: "Report", opposite: "reportContainers"},
					name: {descr: resources["model.ReportContent.name"], vt: "string" , nullable: false, maxLen: 255},
					storedExternalId: {descr: resources["model.ReportContent.storedExternalId"], vt: "string" , nullable: true, maxLen: 255},
					storedStorageType: {descr: resources["model.ReportContent.storedStorageType"], vt: "string" , nullable: true, maxLen: 255},
					contentId: {descr: resources["model.ReportContent.contentId"], vt: "string" , nullable: true, maxLen: 255},
					content: {descr: resources["model.ReportContent.content"], vt: "binary" , nullable: true},
					creationTime: {descr: resources["model.ReportContent.creationTime"], vt: "dateTimeTz" , nullable: false, init: "now"}
				}
			},
			Contractor: {
				descr: resources["model.Contractor"],
				props: {
					correspondent: {descr: resources["model.Contractor.correspondent"], vt: "object" , nullable: true, ref: "CompanyCorrespondent", lazyLoad: true},
					name: {descr: resources["model.Contractor.name"], vt: "text" , nullable: false, maxLen: 256},
					shortName: {descr: resources["model.Contractor.shortName"], vt: "text" , nullable: true, maxLen: 256},
					ogrn: {descr: resources["model.Contractor.ogrn"], vt: "string" , nullable: true, maxLen: 15},
					inn: {descr: resources["model.Contractor.inn"], vt: "string" , nullable: true, maxLen: 12},
					kpp: {descr: resources["model.Contractor.kpp"], vt: "string" , nullable: true, maxLen: 9},
					comment: {descr: resources["model.Contractor.comment"], vt: "text" , nullable: true, maxLen: 2000},
					deleted: {descr: resources["model.Contractor.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.Contractor.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.Contractor.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			CommonTaskCommand: {
				descr: resources["model.CommonTaskCommand"],
				props: {
					command: {descr: resources["model.CommonTaskCommand.command"], vt: "string" , nullable: false, init: "complete_task", maxLen: 255},
					taskId: {descr: resources["model.CommonTaskCommand.taskId"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			TaskType: {
				descr: resources["model.TaskType"],
				props: {
					name: {descr: resources["model.TaskType.name"], vt: "string" , nullable: false, maxLen: 255},
					systemName: {descr: resources["model.TaskType.systemName"], vt: "string" , nullable: false, maxLen: 255},
					creationTime: {descr: resources["model.TaskType.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.TaskType.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentKind: {
				descr: resources["model.DocumentKind"],
				props: {
					name: {descr: resources["model.DocumentKind.name"], vt: "text" , nullable: false, maxLen: 256},
					deleted: {descr: resources["model.DocumentKind.deleted"], vt: "boolean" , nullable: false, init: false},
					documentTypes: {descr: resources["model.DocumentKind.documentTypes"], vt: "object" , nullable: true, ref: "DocumentType", opposite: "documentKinds", many: true, lazyLoad: true},
					creationTime: {descr: resources["model.DocumentKind.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.DocumentKind.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			AccessorsGroupItem: {
				descr: resources["model.AccessorsGroupItem"],
				props: {
					group: {descr: resources["model.AccessorsGroupItem.group"], vt: "object" , nullable: false, ref: "AccessorsGroup", opposite: "items"},
					accessorId: {descr: resources["model.AccessorsGroupItem.accessorId"], vt: "string" , nullable: false, maxLen: 255},
					accessorType: {descr: resources["model.AccessorsGroupItem.accessorType"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			RegNumberTemplate: {
				descr: resources["model.RegNumberTemplate"],
				props: {
					template: {descr: resources["model.RegNumberTemplate.template"], vt: "text" , nullable: false, maxLen: 1000},
					type: {descr: resources["model.RegNumberTemplate.type"], vt: "object" , nullable: false, ref: "DocumentType"},
					creationTime: {descr: resources["model.RegNumberTemplate.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.RegNumberTemplate.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentToDocumentRelation: {
				descr: resources["model.DocumentToDocumentRelation"],
				base: "AbstractDocumentRelation",
				props: {
					target: {descr: resources["model.DocumentToDocumentRelation.target"], vt: "object" , nullable: false, ref: "AbstractDocument"},
					reverse: {descr: resources["model.DocumentToDocumentRelation.reverse"], vt: "object" , nullable: true, ref: "DocumentToDocumentRelation"}
				}
			},
			Attachment: {
				descr: resources["model.Attachment"],
				props: {
					name: {descr: resources["model.Attachment.name"], vt: "string" , nullable: false, maxLen: 255},
					externalId: {descr: resources["model.Attachment.externalId"], vt: "string" , nullable: true, maxLen: 255},
					storageType: {descr: resources["model.Attachment.storageType"], vt: "string" , nullable: true, maxLen: 255},
					storedExternalId: {descr: resources["model.Attachment.storedExternalId"], vt: "string" , nullable: true, maxLen: 255},
					storedStorageType: {descr: resources["model.Attachment.storedStorageType"], vt: "string" , nullable: true, maxLen: 255},
					content: {descr: resources["model.Attachment.content"], vt: "binary" , nullable: true},
					creationTime: {descr: resources["model.Attachment.creationTime"], vt: "dateTimeTz" , nullable: false, init: "now"},
					modifyTime: {descr: resources["model.Attachment.modifyTime"], vt: "dateTimeTz" , nullable: false, init: "now"}
				}
			},
			ReportGenerationTask: {
				descr: resources["model.ReportGenerationTask"],
				props: {
					status: {descr: resources["model.ReportGenerationTask.status"], vt: "enum", flags: false  , nullable: true, init: 1, ref: "ReportGenerationStatus"},
					createdDate: {descr: resources["model.ReportGenerationTask.createdDate"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					owner: {descr: resources["model.ReportGenerationTask.owner"], vt: "object" , nullable: true, ref: "User"},
					taskTypeId: {descr: resources["model.ReportGenerationTask.taskTypeId"], vt: "string" , nullable: true, maxLen: 255},
					report: {descr: resources["model.ReportGenerationTask.report"], vt: "object" , nullable: true, ref: "Report"}
				}
			},
			RegisterDocumentProcessParams: {
				descr: resources["model.RegisterDocumentProcessParams"],
				temp: true,
				props: {
					organization: {descr: resources["model.RegisterDocumentProcessParams.organization"], vt: "object" , nullable: false, ref: "Company"},
					subtype: {descr: resources["model.RegisterDocumentProcessParams.subtype"], vt: "object" , nullable: false, ref: "DocumentSubType"}
				}
			},
			RoleParamDescriptorDefault: {
				descr: resources["model.RoleParamDescriptorDefault"],
				props: {
					parent: {descr: resources["model.RoleParamDescriptorDefault.parent"], vt: "object" , nullable: false, ref: "RoleDescriptorDefault", opposite: "roleParams"},
					paramName: {descr: resources["model.RoleParamDescriptorDefault.paramName"], vt: "string" , nullable: false, maxLen: 255},
					paramTypeName: {descr: resources["model.RoleParamDescriptorDefault.paramTypeName"], vt: "string" , nullable: false, maxLen: 255},
					nullable: {descr: resources["model.RoleParamDescriptorDefault.nullable"], vt: "boolean" , nullable: false, init: true},
					description: {descr: resources["model.RoleParamDescriptorDefault.description"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			IncomingDocument: {
				descr: resources["model.IncomingDocument"],
				base: "AbstractDocument",
				props: {
					envelopeNumber: {descr: resources["model.IncomingDocument.envelopeNumber"], vt: "string" , nullable: true, maxLen: 255},
					incomingDate: {descr: resources["model.IncomingDocument.incomingDate"], vt: "date" , nullable: true},
					deliveryOption: {descr: resources["model.IncomingDocument.deliveryOption"], vt: "object" , nullable: true, ref: "DeliveryOption"},
					referenceNumber: {descr: resources["model.IncomingDocument.referenceNumber"], vt: "string" , nullable: true, maxLen: 255},
					referenceDate: {descr: resources["model.IncomingDocument.referenceDate"], vt: "date" , nullable: true},
					correspondentExternal: {descr: resources["model.IncomingDocument.correspondentExternal"], vt: "object" , nullable: true, ref: "AbstractCorrespondent"},
					signedByExternal: {descr: resources["model.IncomingDocument.signedByExternal"], vt: "string" , nullable: true, maxLen: 255},
					registrator: {descr: resources["model.IncomingDocument.registrator"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					sheetsAmount: {descr: resources["model.IncomingDocument.sheetsAmount"], vt: "i4" , nullable: true},
					annexSheetsAmount: {descr: resources["model.IncomingDocument.annexSheetsAmount"], vt: "i4" , nullable: true},
					reviewDeadlineDate: {descr: resources["model.IncomingDocument.reviewDeadlineDate"], vt: "date" , nullable: true},
					addressees: {descr: resources["model.IncomingDocument.addressees"], vt: "object" , nullable: true, ref: "IncomingDocumentAddressee", opposite: "document", many: true, lazyLoad: true}
				}
			},
			EmployeePosition: {
				descr: resources["model.EmployeePosition"],
				base: "AbstractOrgStructureElement",
				props: {
					parent: {descr: resources["model.EmployeePosition.parent"], vt: "object" , nullable: false, ref: "Position", opposite: "employeePositions"},
					employee: {descr: resources["model.EmployeePosition.employee"], vt: "object" , nullable: false, ref: "Employee", opposite: "employeePositions"},
					assistants: {descr: resources["model.EmployeePosition.assistants"], vt: "object" , nullable: true, ref: "Assistant", opposite: "superior", many: true, lazyLoad: true}
				}
			},
			Position: {
				descr: resources["model.Position"],
				base: "AbstractOrgStructureElement",
				props: {
					parent: {descr: resources["model.Position.parent"], vt: "object" , nullable: false, ref: "Department", opposite: "positions"},
					positionDescription: {descr: resources["model.Position.positionDescription"], vt: "object" , nullable: false, ref: "PositionDescription"},
					employeePositions: {descr: resources["model.Position.employeePositions"], vt: "object" , nullable: true, ref: "EmployeePosition", opposite: "parent", many: true, lazyLoad: true}
				}
			},
			WarrantDocument: {
				descr: resources["model.WarrantDocument"],
				base: "AbstractDocument",
				props: {
					notarizationRequired: {descr: resources["model.WarrantDocument.notarizationRequired"], vt: "boolean" , nullable: false},
					performer: {descr: resources["model.WarrantDocument.performer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					registrator: {descr: resources["model.WarrantDocument.registrator"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					principal: {descr: resources["model.WarrantDocument.principal"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					confidant: {descr: resources["model.WarrantDocument.confidant"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					startDate: {descr: resources["model.WarrantDocument.startDate"], vt: "date" , nullable: true},
					period: {descr: resources["model.WarrantDocument.period"], vt: "timeSpan" , nullable: true},
					sheetsAmount: {descr: resources["model.WarrantDocument.sheetsAmount"], vt: "i4" , nullable: true}
				}
			},
			RoleDescriptorDefault: {
				descr: resources["model.RoleDescriptorDefault"],
				props: {
					roleName: {descr: resources["model.RoleDescriptorDefault.roleName"], vt: "string" , nullable: false, maxLen: 255},
					description: {descr: resources["model.RoleDescriptorDefault.description"], vt: "string" , nullable: false, maxLen: 255},
					roleParams: {descr: resources["model.RoleDescriptorDefault.roleParams"], vt: "object" , nullable: true, ref: "RoleParamDescriptorDefault", opposite: "parent", many: true}
				}
			},
			RelationType: {
				descr: resources["model.RelationType"],
				props: {
					name: {descr: resources["model.RelationType.name"], vt: "string" , nullable: false, maxLen: 255},
					reverse: {descr: resources["model.RelationType.reverse"], vt: "object" , nullable: true, ref: "RelationType"},
					sourceTypes: {descr: resources["model.RelationType.sourceTypes"], vt: "object" , nullable: true, ref: "DocumentType", many: true, lazyLoad: true},
					targetTypes: {descr: resources["model.RelationType.targetTypes"], vt: "object" , nullable: true, ref: "DocumentType", many: true, lazyLoad: true},
					systemName: {descr: resources["model.RelationType.systemName"], vt: "string" , nullable: true, maxLen: 255},
					deleted: {descr: resources["model.RelationType.deleted"], vt: "boolean" , nullable: false, init: false},
					creationTime: {descr: resources["model.RelationType.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.RelationType.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			CorrespondentFilter: {
				descr: resources["model.CorrespondentFilter"],
				temp: true,
				props: {
					name: {descr: resources["model.CorrespondentFilter.name"], vt: "string" , nullable: true, maxLen: 255},
					deleted: {descr: resources["model.CorrespondentFilter.deleted"], vt: "boolean" , nullable: false, init: false}
				}
			},
			CompanyCorrespondent: {
				descr: resources["model.CompanyCorrespondent"],
				base: "AbstractCorrespondent",
				props: {
					shortName: {descr: resources["model.CompanyCorrespondent.shortName"], vt: "string" , nullable: true, maxLen: 255},
					persons: {descr: resources["model.CompanyCorrespondent.persons"], vt: "object" , nullable: true, ref: "CompanyPersonCorrespondent", opposite: "parent", many: true}
				}
			},
			ContractDocument: {
				descr: resources["model.ContractDocument"],
				base: "AbstractDocument",
				props: {
					createdBasedOn: {descr: resources["model.ContractDocument.createdBasedOn"], vt: "object" , nullable: true, ref: "DocumentTemplate", lazyLoad: true},
					urgent: {descr: resources["model.ContractDocument.urgent"], vt: "boolean" , nullable: false},
					paper: {descr: resources["model.ContractDocument.paper"], vt: "boolean" , nullable: false, init: true},
					performer: {descr: resources["model.ContractDocument.performer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					registrator: {descr: resources["model.ContractDocument.registrator"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					signatory: {descr: resources["model.ContractDocument.signatory"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					sheetsAmount: {descr: resources["model.ContractDocument.sheetsAmount"], vt: "i4" , nullable: true},
					annexSheetsAmount: {descr: resources["model.ContractDocument.annexSheetsAmount"], vt: "i4" , nullable: true},
					contractors: {descr: resources["model.ContractDocument.contractors"], vt: "object" , nullable: true, ref: "ContractDocumentContractor", opposite: "document", many: true, lazyLoad: true},
					preparedByContractor: {descr: resources["model.ContractDocument.preparedByContractor"], vt: "boolean" , nullable: false},
					protocolDisagreements: {descr: resources["model.ContractDocument.protocolDisagreements"], vt: "boolean" , nullable: false},
					protocolApproveDisagreements: {descr: resources["model.ContractDocument.protocolApproveDisagreements"], vt: "boolean" , nullable: false},
					cost: {descr: resources["model.ContractDocument.cost"], vt: "decimal" , nullable: true},
					currency: {descr: resources["model.ContractDocument.currency"], vt: "object" , nullable: true, ref: "Currency"},
					costRub: {descr: resources["model.ContractDocument.costRub"], vt: "decimal" , nullable: true},
					settlementType: {descr: resources["model.ContractDocument.settlementType"], vt: "enum", flags: false  , nullable: true, ref: "ContractSettlementType"},
					contractState: {descr: resources["model.ContractDocument.contractState"], vt: "enum", flags: false  , nullable: true, ref: "ContractState"},
					agreementDate: {descr: resources["model.ContractDocument.agreementDate"], vt: "date" , nullable: true},
					durationFromDate: {descr: resources["model.ContractDocument.durationFromDate"], vt: "date" , nullable: true},
					durationToDate: {descr: resources["model.ContractDocument.durationToDate"], vt: "date" , nullable: true},
					completedDate: {descr: resources["model.ContractDocument.completedDate"], vt: "date" , nullable: true},
					conditionIntoForce: {descr: resources["model.ContractDocument.conditionIntoForce"], vt: "enum", flags: false  , nullable: true, ref: "ContractConditionIntoForce"},
					determiningCost: {descr: resources["model.ContractDocument.determiningCost"], vt: "text" , nullable: true, maxLen: 1024},
					terminationDate: {descr: resources["model.ContractDocument.terminationDate"], vt: "date" , nullable: true},
					terminationReason: {descr: resources["model.ContractDocument.terminationReason"], vt: "object" , nullable: true, ref: "ContractRevokeReason"},
					curator: {descr: resources["model.ContractDocument.curator"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					signingDate: {descr: resources["model.ContractDocument.signingDate"], vt: "date" , nullable: true},
					warrantName: {descr: resources["model.ContractDocument.warrantName"], vt: "string" , nullable: true, maxLen: 128},
					dealWithInterest: {descr: resources["model.ContractDocument.dealWithInterest"], vt: "boolean" , nullable: false},
					bigDeal: {descr: resources["model.ContractDocument.bigDeal"], vt: "boolean" , nullable: false},
					greatlyDeal: {descr: resources["model.ContractDocument.greatlyDeal"], vt: "boolean" , nullable: false},
					officialRegistration: {descr: resources["model.ContractDocument.officialRegistration"], vt: "boolean" , nullable: false},
					propertyTransfer: {descr: resources["model.ContractDocument.propertyTransfer"], vt: "boolean" , nullable: false},
					notes: {descr: resources["model.ContractDocument.notes"], vt: "text" , nullable: true, maxLen: 2000},
					documentType: {descr: resources["model.ContractDocument.documentType"], vt: "object" , nullable: false, ref: "DocumentSubType"},
					summary: {descr: resources["model.ContractDocument.summary"], vt: "text" , nullable: true, maxLen: 256}
				}
			},
			Department: {
				descr: resources["model.Department"],
				base: "AbstractOrgStructureElement",
				props: {
					fullName: {descr: resources["model.Department.fullName"], vt: "text" , nullable: false, maxLen: 256},
					code: {descr: resources["model.Department.code"], vt: "string" , nullable: false, maxLen: 64},
					referenceNumber: {descr: resources["model.Department.referenceNumber"], vt: "string" , nullable: true, maxLen: 64},
					headOfUnit: {descr: resources["model.Department.headOfUnit"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					parent: {descr: resources["model.Department.parent"], vt: "object" , nullable: true, ref: "Department", opposite: "departments"},
					departments: {descr: resources["model.Department.departments"], vt: "object" , nullable: true, ref: "Department", opposite: "parent", many: true, lazyLoad: true},
					positions: {descr: resources["model.Department.positions"], vt: "object" , nullable: true, ref: "Position", opposite: "parent", many: true, lazyLoad: true},
					name: {descr: resources["model.Department.name"], vt: "string" , nullable: false, maxLen: 255}
				}
			},
			WeekBasedWorkingCalendarDayInterval: {
				descr: resources["model.WeekBasedWorkingCalendarDayInterval"],
				props: {
					calendar: {descr: resources["model.WeekBasedWorkingCalendarDayInterval.calendar"], vt: "object" , nullable: false, ref: "WeekBasedWorkingCalendar", opposite: "intervals"},
					dayOfWeekValue: {descr: resources["model.WeekBasedWorkingCalendarDayInterval.dayOfWeekValue"], vt: "i4" , nullable: false, init: 1,  maxValue: "7",  minValue: "1"},
					begin: {descr: resources["model.WeekBasedWorkingCalendarDayInterval.begin"], vt: "time" , nullable: false},
					end: {descr: resources["model.WeekBasedWorkingCalendarDayInterval.end"], vt: "time" , nullable: false},
					creationTime: {descr: resources["model.WeekBasedWorkingCalendarDayInterval.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.WeekBasedWorkingCalendarDayInterval.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			User: {
				descr: resources["model.User"],
				props: {
					login: {descr: resources["model.User.login"], vt: "string" , nullable: false, maxLen: 32},
					password: {descr: resources["model.User.password"], vt: "string" , nullable: false, maxLen: 255},
					active: {descr: resources["model.User.active"], vt: "boolean" , nullable: false, init: true},
					creationTime: {descr: resources["model.User.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.User.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastLogin: {descr: resources["model.User.lastLogin"], vt: "dateTimeTz" , nullable: true},
					employee: {descr: resources["model.User.employee"], vt: "object" , nullable: true, ref: "Employee", opposite: "user", lazyLoad: true}
				}
			},
			ContractorFilter: {
				descr: resources["model.ContractorFilter"],
				temp: true,
				props: {
					searchString: {descr: resources["model.ContractorFilter.searchString"], vt: "string" , nullable: true, maxLen: 255},
					allowDeleted: {descr: resources["model.ContractorFilter.allowDeleted"], vt: "boolean" , nullable: false, init: false}
				}
			},
			CommissionPerformerReportAttachment: {
				descr: resources["model.CommissionPerformerReportAttachment"],
				base: "Attachment",
				props: {
					aclId: {descr: resources["model.CommissionPerformerReportAttachment.aclId"], vt: "string" , nullable: true, maxLen: 255},
					reports: {descr: resources["model.CommissionPerformerReportAttachment.reports"], vt: "object" , nullable: true, ref: "CommissionPerformerReport", opposite: "attachments", many: true, lazyLoad: true}
				}
			},
			AbstractReportParams: {
				descr: resources["model.AbstractReportParams"],
				abstract: true,
				props: {
					author: {descr: resources["model.AbstractReportParams.author"], vt: "object" , nullable: true, ref: "User"},
					taskId: {descr: resources["model.AbstractReportParams.taskId"], vt: "string" , nullable: true, maxLen: 255},
					taskTypeId: {descr: resources["model.AbstractReportParams.taskTypeId"], vt: "string" , nullable: false, maxLen: 255},
					creationTime: {descr: resources["model.AbstractReportParams.creationTime"], vt: "dateTimeTz" , nullable: false, init: "now"}
				}
			},
			CommissionStatus: {
				descr: resources["model.CommissionStatus"],
				props: {
					name: {descr: resources["model.CommissionStatus.name"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					systemName: {descr: resources["model.CommissionStatus.systemName"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					creationTime: {descr: resources["model.CommissionStatus.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CommissionStatus.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			CmisContent: {
				descr: resources["model.CmisContent"],
				props: {
					name: {descr: resources["model.CmisContent.name"], vt: "string" , nullable: true},
					content: {descr: resources["model.CmisContent.content"], vt: "binary" , nullable: true}
				}
			},
			LockInfoCommand: {
				descr: resources["model.LockInfoCommand"],
				props: {
					command: {descr: resources["model.LockInfoCommand.command"], vt: "string" , nullable: true, init: "unlock", maxLen: 255},
					lockedObjectId: {descr: resources["model.LockInfoCommand.lockedObjectId"], vt: "string" , nullable: true, maxLen: 255}
				}
			},
			NomenclatureCase: {
				descr: resources["model.NomenclatureCase"],
				props: {
					displayName: {descr: resources["model.NomenclatureCase.displayName"], vt: "text" , nullable: false, maxLen: 526},
					index: {descr: resources["model.NomenclatureCase.index"], vt: "string" , nullable: false, maxLen: 255},
					title: {descr: resources["model.NomenclatureCase.title"], vt: "string" , nullable: false, maxLen: 255},
					year: {descr: resources["model.NomenclatureCase.year"], vt: "object" , nullable: false, ref: "NomenclatureYear", opposite: "cases", lazyLoad: true},
					status: {descr: resources["model.NomenclatureCase.status"], vt: "enum", flags: false  , nullable: false, init: 1, ref: "NomenclatureStatus"},
					retentionPeriod: {descr: resources["model.NomenclatureCase.retentionPeriod"], vt: "i4" , nullable: true,  minValue: "1"},
					retentionPurpose: {descr: resources["model.NomenclatureCase.retentionPurpose"], vt: "string" , nullable: true, maxLen: 255},
					retentionPolicy: {descr: resources["model.NomenclatureCase.retentionPolicy"], vt: "enum", flags: false  , nullable: false, ref: "NomenclatureCaseRetentionPolicy"},
					note: {descr: resources["model.NomenclatureCase.note"], vt: "text" , nullable: true, maxLen: 2000},
					openingDate: {descr: resources["model.NomenclatureCase.openingDate"], vt: "date" , nullable: true},
					closingDate: {descr: resources["model.NomenclatureCase.closingDate"], vt: "date" , nullable: true},
					creationTime: {descr: resources["model.NomenclatureCase.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.NomenclatureCase.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentType: {
				descr: resources["model.DocumentType"],
				props: {
					systemName: {descr: resources["model.DocumentType.systemName"], vt: "text" , nullable: true, maxLen: 256},
					parent: {descr: resources["model.DocumentType.parent"], vt: "object" , nullable: false, ref: "DocumentType"},
					name: {descr: resources["model.DocumentType.name"], vt: "text" , nullable: false, maxLen: 256},
					documentKinds: {descr: resources["model.DocumentType.documentKinds"], vt: "object" , nullable: true, ref: "DocumentKind", opposite: "documentTypes", many: true, lazyLoad: true},
					deleted: {descr: resources["model.DocumentType.deleted"], vt: "boolean" , nullable: false, init: false},
					templateDocumentEntityName: {descr: resources["model.DocumentType.templateDocumentEntityName"], vt: "string" , nullable: true, maxLen: 255},
					creationTime: {descr: resources["model.DocumentType.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.DocumentType.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			ContractDocumentJournalFilter: {
				descr: resources["model.ContractDocumentJournalFilter"],
				temp: true,
				props: {
					organization: {descr: resources["model.ContractDocumentJournalFilter.organization"], vt: "object" , nullable: true, ref: "Company"},
					contractor: {descr: resources["model.ContractDocumentJournalFilter.contractor"], vt: "object" , nullable: true, ref: "Contractor"},
					status: {descr: resources["model.ContractDocumentJournalFilter.status"], vt: "object" , nullable: true, ref: "DocumentStatus"},
					contractState: {descr: resources["model.ContractDocumentJournalFilter.contractState"], vt: "enum", flags: false  , nullable: true, ref: "ContractState"},
					summary: {descr: resources["model.ContractDocumentJournalFilter.summary"], vt: "string" , nullable: true, maxLen: 255},
					costFrom: {descr: resources["model.ContractDocumentJournalFilter.costFrom"], vt: "decimal" , nullable: true},
					costTo: {descr: resources["model.ContractDocumentJournalFilter.costTo"], vt: "decimal" , nullable: true},
					creationDateFrom: {descr: resources["model.ContractDocumentJournalFilter.creationDateFrom"], vt: "date" , nullable: true},
					creationDateTo: {descr: resources["model.ContractDocumentJournalFilter.creationDateTo"], vt: "date" , nullable: true},
					signingDateFrom: {descr: resources["model.ContractDocumentJournalFilter.signingDateFrom"], vt: "date" , nullable: true},
					signingDateTo: {descr: resources["model.ContractDocumentJournalFilter.signingDateTo"], vt: "date" , nullable: true},
					performer: {descr: resources["model.ContractDocumentJournalFilter.performer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					curator: {descr: resources["model.ContractDocumentJournalFilter.curator"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					signatory: {descr: resources["model.ContractDocumentJournalFilter.signatory"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					dealWithInterest: {descr: resources["model.ContractDocumentJournalFilter.dealWithInterest"], vt: "boolean" , nullable: true},
					bigDeal: {descr: resources["model.ContractDocumentJournalFilter.bigDeal"], vt: "boolean" , nullable: true},
					greatlyDeal: {descr: resources["model.ContractDocumentJournalFilter.greatlyDeal"], vt: "boolean" , nullable: true}
				}
			},
			CorrespondentContactType: {
				descr: resources["model.CorrespondentContactType"],
				props: {
					name: {descr: resources["model.CorrespondentContactType.name"], vt: "string" , nullable: false, readOnly: true, maxLen: 32},
					systemName: {descr: resources["model.CorrespondentContactType.systemName"], vt: "string" , nullable: false, readOnly: true, maxLen: 32},
					creationTime: {descr: resources["model.CorrespondentContactType.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CorrespondentContactType.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			WarrantJournalFilter: {
				descr: resources["model.WarrantJournalFilter"],
				temp: true,
				props: {
					regNumber: {descr: resources["model.WarrantJournalFilter.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					identifier: {descr: resources["model.WarrantJournalFilter.identifier"], vt: "string" , nullable: true, maxLen: 255},
					summary: {descr: resources["model.WarrantJournalFilter.summary"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.WarrantJournalFilter.status"], vt: "object" , nullable: true, ref: "DocumentStatus"},
					startDate: {descr: resources["model.WarrantJournalFilter.startDate"], vt: "date" , nullable: true},
					organization: {descr: resources["model.WarrantJournalFilter.organization"], vt: "object" , nullable: true, ref: "Company"},
					period: {descr: resources["model.WarrantJournalFilter.period"], vt: "timeSpan" , nullable: true}
				}
			},
			CommissionPerformerReport: {
				descr: resources["model.CommissionPerformerReport"],
				props: {
					performer: {descr: resources["model.CommissionPerformerReport.performer"], vt: "object" , nullable: false, ref: "CommissionPerformer", opposite: "reports"},
					status: {descr: resources["model.CommissionPerformerReport.status"], vt: "object" , nullable: false, ref: "CommissionPerformerReportStatus"},
					reportVersion: {descr: resources["model.CommissionPerformerReport.reportVersion"], vt: "i4" , nullable: false},
					description: {descr: resources["model.CommissionPerformerReport.description"], vt: "text" , nullable: true, maxLen: 2000},
					author: {descr: resources["model.CommissionPerformerReport.author"], vt: "object" , nullable: false, ref: "EmployeePosition"},
					sent: {descr: resources["model.CommissionPerformerReport.sent"], vt: "dateTimeTz" , nullable: true},
					approved: {descr: resources["model.CommissionPerformerReport.approved"], vt: "dateTimeTz" , nullable: true},
					rejected: {descr: resources["model.CommissionPerformerReport.rejected"], vt: "dateTimeTz" , nullable: true},
					rejectedBy: {descr: resources["model.CommissionPerformerReport.rejectedBy"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					reasonToReject: {descr: resources["model.CommissionPerformerReport.reasonToReject"], vt: "text" , nullable: true, maxLen: 2000},
					aclId: {descr: resources["model.CommissionPerformerReport.aclId"], vt: "string" , nullable: true, maxLen: 255},
					attachments: {descr: resources["model.CommissionPerformerReport.attachments"], vt: "object" , nullable: true, ref: "CommissionPerformerReportAttachment", opposite: "reports", many: true, lazyLoad: true},
					creationTime: {descr: resources["model.CommissionPerformerReport.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CommissionPerformerReport.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			DocumentStatus: {
				descr: resources["model.DocumentStatus"],
				props: {
					name: {descr: resources["model.DocumentStatus.name"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					systemName: {descr: resources["model.DocumentStatus.systemName"], vt: "string" , nullable: false, readOnly: true, maxLen: 255},
					creationTime: {descr: resources["model.DocumentStatus.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.DocumentStatus.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			ApprovalQueue: {
				descr: resources["model.ApprovalQueue"],
				props: {
					owner: {descr: resources["model.ApprovalQueue.owner"], vt: "object" , nullable: true, ref: "Approver", opposite: "queues"},
					iteration: {descr: resources["model.ApprovalQueue.iteration"], vt: "object" , nullable: true, ref: "ApprovalIteration", opposite: "queues"},
					queueType: {descr: resources["model.ApprovalQueue.queueType"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "ApprovalQueueType"},
					createdOn: {descr: resources["model.ApprovalQueue.createdOn"], vt: "enum", flags: false  , nullable: false, init: 2, ref: "ApprovalPlanningStage"},
					editable: {descr: resources["model.ApprovalQueue.editable"], vt: "boolean" , nullable: false, init: false},
					name: {descr: resources["model.ApprovalQueue.name"], vt: "string" , nullable: false, maxLen: 255},
					maxDays: {descr: resources["model.ApprovalQueue.maxDays"], vt: "i4" , nullable: false, init: 2,  minValue: "0"},
					maxHours: {descr: resources["model.ApprovalQueue.maxHours"], vt: "i4" , nullable: false, init: 0,  minValue: "0"},
					state: {descr: resources["model.ApprovalQueue.state"], vt: "enum", flags: false  , nullable: false, init: 0, ref: "ApprovalEntityState"},
					aclId: {descr: resources["model.ApprovalQueue.aclId"], vt: "string" , nullable: false, maxLen: 255},
					approvers: {descr: resources["model.ApprovalQueue.approvers"], vt: "object" , nullable: true, ref: "Approver", opposite: "queue", many: true, lazyLoad: true}
				}
			},
			CorrespondentContactKind: {
				descr: resources["model.CorrespondentContactKind"],
				props: {
					name: {descr: resources["model.CorrespondentContactKind.name"], vt: "string" , nullable: false, readOnly: true, maxLen: 32},
					contactTypes: {descr: resources["model.CorrespondentContactKind.contactTypes"], vt: "object" , nullable: false, readOnly: true, ref: "CorrespondentContactType", many: true, lazyLoad: true},
					creationTime: {descr: resources["model.CorrespondentContactKind.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.CorrespondentContactKind.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			AccessorsGroup: {
				descr: resources["model.AccessorsGroup"],
				props: {
					name: {descr: resources["model.AccessorsGroup.name"], vt: "string" , nullable: false, maxLen: 255},
					items: {descr: resources["model.AccessorsGroup.items"], vt: "object" , nullable: true, ref: "AccessorsGroupItem", opposite: "group", many: true}
				}
			},
			DocumentTemplate: {
				descr: resources["model.DocumentTemplate"],
				props: {
					parent: {descr: resources["model.DocumentTemplate.parent"], vt: "object" , nullable: false, ref: "DocumentSubType"},
					company: {descr: resources["model.DocumentTemplate.company"], vt: "object" , nullable: false, ref: "Company"},
					name: {descr: resources["model.DocumentTemplate.name"], vt: "text" , nullable: false, maxLen: 256},
					description: {descr: resources["model.DocumentTemplate.description"], vt: "text" , nullable: true, maxLen: 20000},
					deleted: {descr: resources["model.DocumentTemplate.deleted"], vt: "boolean" , nullable: false, init: false},
					document: {descr: resources["model.DocumentTemplate.document"], vt: "object" , nullable: false, ref: "AbstractDocument"},
					creationTime: {descr: resources["model.DocumentTemplate.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.DocumentTemplate.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			RelationTypeFilter: {
				descr: resources["model.RelationTypeFilter"],
				temp: true,
				props: {
					name: {descr: resources["model.RelationTypeFilter.name"], vt: "string" , nullable: true, maxLen: 255},
					sourceType: {descr: resources["model.RelationTypeFilter.sourceType"], vt: "object" , nullable: true, ref: "DocumentType"},
					deleted: {descr: resources["model.RelationTypeFilter.deleted"], vt: "boolean" , nullable: true, init: false}
				}
			},
			NomenclatureYear: {
				descr: resources["model.NomenclatureYear"],
				props: {
					year: {descr: resources["model.NomenclatureYear.year"], vt: "i4" , nullable: false,  maxValue: "2099",  minValue: "1990"},
					department: {descr: resources["model.NomenclatureYear.department"], vt: "object" , nullable: false, ref: "Department", lazyLoad: true},
					status: {descr: resources["model.NomenclatureYear.status"], vt: "enum", flags: false  , nullable: false, init: 1, ref: "NomenclatureStatus"},
					cases: {descr: resources["model.NomenclatureYear.cases"], vt: "object" , nullable: true, ref: "NomenclatureCase", opposite: "year", many: true, lazyLoad: true},
					creationTime: {descr: resources["model.NomenclatureYear.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.NomenclatureYear.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			WorkingCalendarDayIntervalObject: {
				descr: resources["model.WorkingCalendarDayIntervalObject"],
				temp: true,
				props: {
					name: {descr: resources["model.WorkingCalendarDayIntervalObject.name"], vt: "text" , nullable: true, maxLen: 2000},
					calendarTypeId: {descr: resources["model.WorkingCalendarDayIntervalObject.calendarTypeId"], vt: "string" , nullable: false, maxLen: 255},
					calendarId: {descr: resources["model.WorkingCalendarDayIntervalObject.calendarId"], vt: "string" , nullable: false, maxLen: 255},
					eventType: {descr: resources["model.WorkingCalendarDayIntervalObject.eventType"], vt: "string" , nullable: false, maxLen: 255},
					allDayEvent: {descr: resources["model.WorkingCalendarDayIntervalObject.allDayEvent"], vt: "boolean" , nullable: false},
					begin: {descr: resources["model.WorkingCalendarDayIntervalObject.begin"], vt: "dateTime" , nullable: false},
					end: {descr: resources["model.WorkingCalendarDayIntervalObject.end"], vt: "dateTime" , nullable: false}
				}
			},
			IncomingDocumentJournalFilter: {
				descr: resources["model.IncomingDocumentJournalFilter"],
				temp: true,
				props: {
					regNumber: {descr: resources["model.IncomingDocumentJournalFilter.regNumber"], vt: "string" , nullable: true, maxLen: 255},
					identifier: {descr: resources["model.IncomingDocumentJournalFilter.identifier"], vt: "string" , nullable: true, maxLen: 255},
					summary: {descr: resources["model.IncomingDocumentJournalFilter.summary"], vt: "string" , nullable: true, maxLen: 255},
					status: {descr: resources["model.IncomingDocumentJournalFilter.status"], vt: "object" , nullable: true, ref: "DocumentStatus"},
					regDateFrom: {descr: resources["model.IncomingDocumentJournalFilter.regDateFrom"], vt: "date" , nullable: true},
					regDateTo: {descr: resources["model.IncomingDocumentJournalFilter.regDateTo"], vt: "date" , nullable: true},
					envelopeNumber: {descr: resources["model.IncomingDocumentJournalFilter.envelopeNumber"], vt: "string" , nullable: true, maxLen: 255},
					referenceNumber: {descr: resources["model.IncomingDocumentJournalFilter.referenceNumber"], vt: "string" , nullable: true, maxLen: 255},
					correspondentExternal: {descr: resources["model.IncomingDocumentJournalFilter.correspondentExternal"], vt: "object" , nullable: true, ref: "AbstractCorrespondent"},
					organization: {descr: resources["model.IncomingDocumentJournalFilter.organization"], vt: "object" , nullable: true, ref: "Company"},
					nomenclatureCase: {descr: resources["model.IncomingDocumentJournalFilter.nomenclatureCase"], vt: "object" , nullable: true, ref: "NomenclatureCase"}
				}
			},
			OutgoingDocument: {
				descr: resources["model.OutgoingDocument"],
				base: "AbstractDocument",
				props: {
					urgent: {descr: resources["model.OutgoingDocument.urgent"], vt: "boolean" , nullable: false},
					paper: {descr: resources["model.OutgoingDocument.paper"], vt: "boolean" , nullable: false},
					performer: {descr: resources["model.OutgoingDocument.performer"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					registrator: {descr: resources["model.OutgoingDocument.registrator"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					signatory: {descr: resources["model.OutgoingDocument.signatory"], vt: "object" , nullable: true, ref: "EmployeePosition"},
					sheetsAmount: {descr: resources["model.OutgoingDocument.sheetsAmount"], vt: "i4" , nullable: true},
					annexSheetsAmount: {descr: resources["model.OutgoingDocument.annexSheetsAmount"], vt: "i4" , nullable: true},
					addressees: {descr: resources["model.OutgoingDocument.addressees"], vt: "object" , nullable: true, ref: "OutgoingDocumentAddressee", opposite: "document", many: true, lazyLoad: true}
				}
			},
			DeliveryType: {
				descr: resources["model.DeliveryType"],
				props: {
					name: {descr: resources["model.DeliveryType.name"], vt: "text" , nullable: false, readOnly: true, maxLen: 256},
					systemName: {descr: resources["model.DeliveryType.systemName"], vt: "text" , nullable: false, readOnly: true, maxLen: 256},
					creationTime: {descr: resources["model.DeliveryType.creationTime"], vt: "dateTimeTz" , nullable: false, readOnly: true},
					lastModifiedTime: {descr: resources["model.DeliveryType.lastModifiedTime"], vt: "dateTimeTz" , nullable: false, readOnly: true}
				}
			},
			FiledIn: {
				descr: resources["model.FiledIn"],
				props: {
					folderId: {descr: resources["model.FiledIn.folderId"], vt: "string" , nullable: false},
					objectId: {descr: resources["model.FiledIn.objectId"], vt: "string" , nullable: false}
				}
			}
		}
	}
});
